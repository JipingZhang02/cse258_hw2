{'Q1': [0.16130237168160533, 0.1607838024608832], 'Q2': [0.14190530394736312, 0.1430222366785745], 'Q3': [1, 0.14142076181125796, 0.14220884792124866], 'Q4': [0.3122273694930058, 0.16109632033831978, 0.1461270153739065], 'Q5': [(0.015228426395939087, 'B00H7NFDKA'), (0.014492753623188406, 'B00QKVV3HC'), (0.014492753623188406, 'B00GXRMD7W'), (0.014084507042253521, 'B00H7ILRRI'), (0.014084507042253521, 'B0057RUMPO'), (0.014084507042253521, 'B000B6DTYW'), (0.013888888888888888, 'B00L2708TI'), (0.013513513513513514, 'B009Z1KKWI'), (0.013333333333333334, 'B000VYINCW'), (0.013333333333333334, 'B003F2BDZQ')], 'Q6': 1.7165666373340158, 'Q7': ["In this problem, I used the teacher's suggested timeFactorFunction, f(t)=exp(-lambda*t).\nTo make it reasonable, lambda inverse should be comparable to time span between purchases\nSo I first used random sampling to estimate the average time_span between purchases\nThen searched lambda inverse through [2^(-20)~2^(20)]*avg_time_span and see which has best effect\nFinally I found 2^(-14)*avg_time_span as lambda inverse is the best\nWhich means we should give recent purchase a much bigger weight than earlier purchases.\n", 1.6993407480416247]}
